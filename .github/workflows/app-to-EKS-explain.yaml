#name: App Github Actions, ArgoCD, EKS
#
#on:
#  workflow_run:
#    workflows: ["Build and Push Docker Image To AWS ECR"] # 이전 CI 워크플로가 완료되었을 때 실행
#    types:
#      - completed
#
#jobs:
#  deploy:
#    runs-on: ubuntu-latest
#
#    steps:
#      # 1. 메인 리포지토리 및 서브모듈 체크아웃
#      - name: Checkout Main Repository
#        uses: actions/checkout@v4
#        with:
#          submodules: recursive # 서브모듈도 함께 가져오기
#          token: ${{ secrets.TOKEN }} # GitHub Personal Access Token 사용
#        2. Install ArgoCD CLI
#       - name: Install ArgoCD CLI
#         run: |
#           curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
#           chmod +x /usr/local/bin/argocd

#
#      # 3. AWS 인증 구성
#      - uses: aws-actions/configure-aws-credentials@v4
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # AWS Access Key ID
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # AWS Secret Access Key
#          aws-region: ${{ secrets.AWS_REGION }} # AWS 리전 설정
#
#      # 4. 매니페스트 파일에 컨테이너 이미지 업데이트
#      - name: Update Container Image in Manifests
#        run: |
#          find ./k8s-manifests -type f -name "*.yaml" -exec \ # 모든 YAML 파일 검색
#          sed -i "s|<IMAGE_PLACEHOLDER>|${{ secrets.ECR_PRIVATE_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_PRIVATE_REPOSITORY }}:latest|g" {} \; # 이미지 태그 최신화
#
#      # 5. 변경된 매니페스트 파일 커밋 및 푸시
#      - name: Commit and Push Manifest Changes
#        run: |
#          git config --local user.email ${{ secrets.EMAIL }} # 커밋 이메일 설정
#          git config --local user.name ${{ secrets.NAME }}   # 커밋 사용자 이름 설정
#          git add ./k8s-manifests # 변경 사항 스테이징
#          git diff-index --quiet HEAD || git commit -m "Update deployment manifests for ArgoCD" # 변경 사항이 있을 경우에만 커밋
#          git diff-index --quiet HEAD || git push origin main # 변경 사항이 있을 경우에만 푸시
#
#      # 6. ArgoCD를 사용해 EKS에 배포
#      - name: Deploy with ArgoCD
#        env:
#          ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }} # ArgoCD 서버 URL
#          ARGOCD_USERNAME: ${{ secrets.ARGOCD_USERNAME }} # ArgoCD 사용자 이름
#          ARGOCD_PASSWORD: ${{ secrets.ARGOCD_PASSWORD }} # ArgoCD 비밀번호
#        run: |
#          argocd login $ARGOCD_SERVER --username $ARGOCD_USERNAME --password $ARGOCD_PASSWORD --insecure # ArgoCD 서버에 로그인
#          argocd app sync argoAwsApp # ArgoCD 애플리케이션 동기화
#          argocd app wait argoAwsApp --health # 애플리케이션 상태 확인 및 대기
